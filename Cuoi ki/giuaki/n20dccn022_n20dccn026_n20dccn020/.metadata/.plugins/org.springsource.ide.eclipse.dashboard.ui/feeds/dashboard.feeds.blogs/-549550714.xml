<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 13 Apr 2023 10:45:37 GMT</lastBuildDate><item><title><![CDATA[Spring Framework 6.0.8, 5.3.27 and 5.2.24.RELEASE fix cve-2023-20863]]></title><link>https://spring.io/blog/2023/04/13/spring-framework-6-0-8-5-3-27-and-5-2-24-release-fix-cve-2023-20863</link><guid isPermaLink="true">https://spring.io/blog/2023/04/13/spring-framework-6-0-8-5-3-27-and-5-2-24-release-fix-cve-2023-20863</guid><dc:creator><![CDATA[Brian Clozel]]></dc:creator><pubDate>Thu, 13 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that the Spring Framework &lt;code&gt;6.0.8&lt;/code&gt;, &lt;code&gt;5.3.27&lt;/code&gt; and &lt;code&gt;5.2.24.RELEASE&lt;/code&gt; versions are available now.&lt;/p&gt;
&lt;p&gt;Spring Framework &lt;code&gt;6.0.8&lt;/code&gt; ships with &lt;a href=&quot;https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8&quot;&gt;60 fixes and documentation improvements&lt;/a&gt;, including &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues?q=is%3Aclosed+milestone%3A6.0.8+label%3A%22type%3A+regression%22&quot;&gt;5 fixes for regressions&lt;/a&gt;. Spring Framework &lt;code&gt;5.3.27&lt;/code&gt; ships with &lt;a href=&quot;https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27&quot;&gt;20 fixes and documentation improvements&lt;/a&gt;, including &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues?q=is%3Aclosed+milestone%3A5.3.27+label%3A%22type%3A+regression%22&quot;&gt;4 fixes for regressions&lt;/a&gt;.
Spring Framework &lt;code&gt;5.2.24.RELEASE&lt;/code&gt; ships with &lt;a href=&quot;https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE&quot;&gt;3 fixes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Those versions fix the following CVE:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/security/cve-2023-20863&quot;&gt;cve-2023-20863: Spring Expression DoS Vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those versions will be shipped with Spring Boot &lt;code&gt;3.0.6&lt;/code&gt; and &lt;code&gt;2.7.11&lt;/code&gt;, &lt;a href=&quot;https://calendar.spring.io/&quot;&gt;to be released next Thursday&lt;/a&gt;. In the meantime, you can update your existing Spring Boot application to pick up the latest Framework version.&lt;/p&gt;
&lt;p&gt;For Gradle builds in &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;ext[&apos;spring-framework.version&apos;] = &apos;6.0.8&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or for Maven builds in &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;properties&gt;
  &amp;#x3C;spring-framework.version&gt;6.0.8&amp;#x3C;/spring-framework.version&gt;
&amp;#x3C;/properties&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.spring.io/spring-framework/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-framework&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/6.0.8/reference/html/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: Sonatype's Steve Poole and Gradle's Justin Reock on Improving Developer Productivity without compromising on things like security]]></title><link>https://spring.io/blog/2023/04/13/a-bootiful-podcast-sonatypes-steve-poole-and-gradles-justin-reock-on</link><guid isPermaLink="true">https://spring.io/blog/2023/04/13/a-bootiful-podcast-sonatypes-steve-poole-and-gradles-justin-reock-on</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 13 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;iframe title=&quot;Sonatype’s Steve Poole and Gradle’s Justin Reock on improving developer productivity without comprising things like security &quot; allowtransparency=&quot;true&quot; height=&quot;300&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?from=embed&amp;i=rieq2-13e0502-pb&amp;square=1&amp;share=1&amp;download=1&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;rtl=0&amp;logo_link=&amp;btn-skin=7&amp;size=300&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! Welcome to another installment of a Bootiful Podcast! In this installment, recorded at Devnexus in Atlanta, GA, I talk to newcomer to the show Steve Poole, from Sonatype, and Justin Reock, from Gradle, about improving developer productivity without comprising on things like security.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wrote an e-book on AOT and GraalVM support &lt;a href=&quot;https://bit.ly/springboot3-graalvm-ebook&quot;&gt;in Spring Boot 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out this roving 1 hour tour of &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;Spring Boot 3 over on the Jetbrains channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did a 6m video looking at &lt;a href=&quot;https://www.youtube.com/watch?v=WJutdzX9hl0&quot;&gt;Spring Boot 3 for the impatient on my channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;want a great free resource to learn Spring Boot? Check out the &lt;a href=&quot;https://spring.academy&quot;&gt;Spring.academy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - April 11th, 2023]]></title><link>https://spring.io/blog/2023/04/11/this-week-in-spring-april-11th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/04/11/this-week-in-spring-april-11th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 11 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! As I write this I am in Amsterdam, Netherlands, preparing to speak at the Utrecht JUG tonight along with fellow Java Champion Trisha Gee. We&apos;re not speaking together, but instead it&apos;s a double header: she&apos;ll speak first, then I after. I am &lt;em&gt;super&lt;/em&gt; excited to learn from her! Then, I join James Ward and we&apos;ll speak at Kotlin Conf. Then, I take a quick train to Paris to speak at Devoxx Fr. I hope if you&apos;re about you&apos;ll join me at any of these talks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Want to learn the nitty gritty of using Spring Cloud&apos;s Azure Key Vault integration? Check out this guide on the Baeldung blog: &lt;a href=&quot;https://feeds.feedblitz.com/~/733740959/0/baeldung~A-Guide-to-Spring-Cloud-Azure-Key-Vault&quot;&gt;A Guide to Spring Cloud Azure Key Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/28/context-propagation-with-project-reactor-1-the-basics&quot;&gt;Context Propagation with Project Reactor 1 - The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/29/context-propagation-with-project-reactor-2-the-bumpy-road-of-spring-cloud&quot;&gt;Context Propagation with Project Reactor 2 - The bumpy road of Spring Cloud Sleuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/30/context-propagation-with-project-reactor-3-unified-bridging-between-reactive&quot;&gt;Context Propagation with Project Reactor 3 - Unified Bridging between Reactive and Imperative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/jmfayard/is-there-an-equivalent-of-spring-boot-for-kotlin-hfg&quot;&gt;Is There an Equivalent of Spring Boot for Kotlin?&lt;/a&gt; (Yes. Also: Sébastien Deleuze works like a &quot;Greek hero&quot;)&lt;/li&gt;
&lt;li&gt;Did you know that Spring has a ton of helpful utility methods? Check out &lt;a href=&quot;https://www.youtube.com/watch?v=Zo9e3i8HxX4&quot;&gt;this oldie-but-a-goodie &lt;em&gt;Spring Tips&lt;/em&gt; video I did&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-boot-3-url-matching&quot;&gt;URL Matching in Spring Boot 3&lt;/a&gt; looks at the potentially breaking change in the behavior of trailing slash matching in Spring MVC and Spring Webflux URI paths. &lt;a href=&quot;https://www.baeldung.com/spring-boot-3-url-matching#override-default-configuration&quot;&gt;Option 4 is the best way to go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/JavaAtMicrosoft/status/1644327162777051143&quot;&gt;Check out the quickstart guide for Azure Spring Apps&lt;/a&gt;, the cloud platform-as-a-service co-developed by Microsoft and the Spring team&lt;/li&gt;
&lt;li&gt;Did you know the good folks from Jetbrains have a few fantastic Spotify playlists: &lt;a href=&quot;https://open.spotify.com/playlist/3poYC6caoCbyCM44XViItc?si=c01563c0627c41b2&quot;&gt;Code Like It&apos;s the 80s &lt;/a&gt;,  &lt;a href=&quot;https://open.spotify.com/playlist/3JEvwuKbVKoggEA75gWqET?si=c0027afc84844cc4&quot;&gt;Adrenaline Coding&lt;/a&gt;, and  &lt;a href=&quot;https://open.spotify.com/playlist/5hmeg2ngrrAFbz1Gu05PXi?si=f4235efd879b4fdc&quot;&gt;Pure Flow Coding&lt;/a&gt;? I listen to them all the time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot;&gt;The new TIOBE language index is out&lt;/a&gt;. Java has maintained its normal place; there&apos;s a bit of an upset in the inclusion of the Zig programming language, a would-be C++ successor, in the roundup. Kotlin is&lt;/li&gt;
&lt;li&gt;I did a talk for the good folks over at Jetbrains on &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;Spring Boot 3 and some folks seem to like it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Want a great free resource to learn Spring? &lt;a href=&quot;https://spring.academy/&quot;&gt;Check out the Spring.academy&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: José Paumard, Java Champion alumnus and Java legend, on Project Loom, Valhalla, and more, from Devnexus 2023!]]></title><link>https://spring.io/blog/2023/04/06/a-bootiful-podcast-jose-paumard-java-champion-alumnus-and-java-legend-on</link><guid isPermaLink="true">https://spring.io/blog/2023/04/06/a-bootiful-podcast-jose-paumard-java-champion-alumnus-and-java-legend-on</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 06 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;. In this installment I&apos;ll talk to legendary Oracle Java Champion (alumnus), Java advocate, professor emeritus, and all around amiable fellow &lt;a href=&quot;https://twitter.com/JosePaumard&quot;&gt;José Paumard&lt;/a&gt;, recorded at the amazing Devnexus 2023 event!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/jpaumard&quot;&gt;José&apos;s English-language Youtube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/@coursenlignejava&quot;&gt;José&apos;s French-language Youtube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/josePaumard&quot;&gt;José&apos;s twitter account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bit.ly/springboot3-graalvm-ebook&quot;&gt;I wrote an e-book on AOT and GraalVM support in Spring Boot 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;did u &lt;a href=&quot;https://www.youtube.com/watch?v=nyR-qzj7O3w&amp;#x26;list=PLgGXSWYM2FpPw8rV0tZoMiJYSCiLhPnOc&amp;#x26;index=1&quot;&gt;see that Spring Tips video I did on Spring Boot 3 and Vaadin?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;this roving 1 hour tour of Spring Boot 3 over on the Jetbrains channel &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did a 6m video &lt;a href=&quot;https://www.youtube.com/watch?v=WJutdzX9hl0&quot;&gt;looking at Spring Boot for the impatient on my channel &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - April 4th, 2023]]></title><link>https://spring.io/blog/2023/04/04/this-week-in-spring-april-4th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/04/04/this-week-in-spring-april-4th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;How are you doin? Me, I&apos;m exhausted! It&apos;s been quite the odyssey trying to get to Devnexus, but I made it, eventually! If you&apos;re at Devnexus, check out this &lt;a href=&quot;https://spring.io/blog/2023/04/04/the-spring-team-at-devnexus-2023&quot;&gt;roundup of interesting and awesome talks from the Spring team and community this week at Devnexus 2023&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/30/spring-web-flow-3-0-rc1-released&quot;&gt;Spring Web Flow 3.0 RC1 Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;in last weeks&apos; &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I talked &lt;a href=&quot;https://spring.io/blog/2023/03/30/a-bootiful-podcast-spring-integration-lead-artem-bilan-on-the-latest-in&quot;&gt;to Spring Integration lead Artem Bilan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tanzu.vmware.com/content/blog/announcing-spring-cloud-gateway-for-kubernetes-2-0&quot;&gt;Announcing Spring Cloud Gateway for Kubernetes 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/blog/2023/03/30/kubescape-validating-admission-policy-library/&quot;&gt;Blog: Kubernetes Validating Admission Policies: A Practical Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/29/context-propagation-with-project-reactor-2-the-bumpy-road-of-spring-cloud&quot;&gt;Context Propagation with Project Reactor 2 - The bumpy road of Spring Cloud Sleuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/30/context-propagation-with-project-reactor-3-unified-bridging-between-reactive&quot;&gt;Context Propagation with Project Reactor 3 - Unified Bridging between Reactive and Imperative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the good &lt;a href=&quot;https://twitter.com/david_syer&quot;&gt;Dr. Dave Syer&lt;/a&gt; shares our friend &lt;a href=&quot;https://twitter.com/linux_java&quot;&gt;Jacky&apos;s&lt;/a&gt; extension &lt;a href=&quot;https://github.com/linux-china/toolchains-maven-plugin&quot;&gt;to the Apache Maven Toolchains plugin &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/31/spring-cloud-2022-0-2-is-available&quot;&gt;Spring Cloud 2022.0.2 Is Available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://feeds.feedblitz.com/~/733311506/0/baeldung~The-Difference-Between-junitvintageengine-and-junitjupiterengine&quot;&gt;The Difference Between junit-vintage-engine and junit-jupiter-engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[The Spring team at Devnexus 2023]]></title><link>https://spring.io/blog/2023/04/04/the-spring-team-at-devnexus-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/04/04/the-spring-team-at-devnexus-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The Spring team is out in force here at Devnexus! I hope you&apos;ll come see us. Here&apos;s my annotated look at what sessions I want to see over the oh-so-brief three days of the show.&lt;/p&gt;
&lt;h2&gt;Tuesday, April 4th, 2023&lt;/h2&gt;
&lt;p&gt;The fun starts today, with the &lt;a href=&quot;https://devnexus.com/presentations/spring-boot-3-workshop&quot;&gt;Spring Boot 3 workshop&lt;/a&gt; with Spring Boot cofounder Phil Webb and Micrometer and observability ninja Jonatan Ivanov&lt;/p&gt;
&lt;h2&gt;Wednesday, April 5th, 2023&lt;/h2&gt;
&lt;p&gt;Tomorrow, the fun continues! At 10am, our friends over at Vaadin will have a talk, &lt;a href=&quot;https://devnexus.com/presentations/full-stack-reactive-with-spring-boot-react&quot;&gt;&lt;em&gt;Full Stack Reactive with Spring Boot and React&lt;/em&gt;&lt;/a&gt;, that looks mighty interesting! My friends and Nate Schutta and Dan Vega have a talk, &lt;a href=&quot;https://devnexus.com/presentations/spring-recipes-a-collection-of-common-sense-solutions&quot;&gt;&lt;em&gt;Spring Recipes: A Collection of Common-Sense Solutions&lt;/em&gt;&lt;/a&gt;, that I think will be super insightful.&lt;/p&gt;
&lt;p&gt;At 11:30am, our friend Brian Sam-Bodden over at Redis will have a very interesting talk, &lt;a href=&quot;https://devnexus.com/presentations/vector-similarity-search-in-spring-with-redis-stack&quot;&gt;Vector Similiarity Search in Spring with Redis Stack&lt;/a&gt;. My friend, the legendary, Mark Heckler, from Microsoft, will be giving a talk &lt;a href=&quot;https://devnexus.com/presentations/let-s-get-functional-the-fast-path-to-smart-serverless-with-spring-cloud-function-azure-functions&quot;&gt;&lt;em&gt;Let&apos;s Get Functional: the fast path to smart serverless with Spring Cloud Function and Azure Functions&lt;/em&gt;&lt;/a&gt;. Spring Batch community legend, and fellow Java Champion, Rodrigo Graciano will be doing a presentation &lt;a href=&quot;https://devnexus.com/presentations/scaling-batch-applications&quot;&gt;&lt;em&gt;Scaling Batch Applications&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At 1:30pm, Jared Rhodes - a Microsoft MVP and consultant at Epam Solutions - wil be doing an very interesting talk, &lt;a href=&quot;https://devnexus.com/presentations/getting-started-with-azure-spring-apps&quot;&gt;&lt;em&gt;Getting Started with Azure Spring Apps&lt;/em&gt;&lt;/a&gt;. While not strictly speaking related to Spring, our friends over at Gradle, Steve Poole and Justin Reock, have an interesting talk about developer productivity called &lt;a href=&quot;https://devnexus.com/presentations/developer-productivity-clean-secure-fast&quot;&gt;&lt;em&gt;Developer Productivity - clean | secure | fast&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The fun continues at 3pm, with Glen Renfro and Felipe Gutierrez giving a talk on the new-ish &lt;a href=&quot;https://devnexus.com/presentations/spring-modulith-what-the-what&quot;&gt;Spring Modulith&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;And, of course, at 4pm, I will be presenting a rip roaring look at &lt;a href=&quot;https://devnexus.com/presentations/bootiful-spring-boot-3&quot;&gt;&lt;em&gt;&lt;em&gt;Bootiful Spring Boot 3&lt;/em&gt;&lt;/em&gt;&lt;/a&gt;. This is going to be a ton of fun and a great way to close out the day.&lt;/p&gt;
&lt;p&gt;Yah. That&apos;s right. I said &quot;the day.&quot; We&apos;re not done! There&apos;s still another amazing day - Thursday April 6th, 2023 - so let&apos;s take a look at that, now!&lt;/p&gt;
&lt;h2&gt;Thursday, April 6th, 2023&lt;/h2&gt;
&lt;p&gt;At 10am, Spring Cloud cofounder Spencer Gibb will have a presentation on &lt;a href=&quot;https://devnexus.com/presentations/spring-cloud-gateway-what-is-it-and-what-s-new&quot;&gt;Spring Cloud Gateway: What is it and What&apos;s New&lt;/a&gt;. Tim Spann will also be presenting on &lt;a href=&quot;https://devnexus.com/presentations/apache-pulsar-development-101-with-java&quot;&gt;Apache Pulsar Development 101 with Java&lt;/a&gt;, which I assume would include coverage of Spring for Apache Pulsar. Friend and legend DaShaun Carter will be doing a hilariously titled talk, &lt;a href=&quot;https://devnexus.com/presentations/my-children-will-never-deploy-active-passive&quot;&gt;&lt;em&gt;My children will never deploy active-passive&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At 11am, Chris Bono and Christophe Bornet will be introducing &lt;a href=&quot;https://devnexus.com/presentations/introducing-spring-for-apache-pulsar&quot;&gt;Spring for Apache Pulsar&lt;/a&gt;. Cloud-native and my friend Whitney Lee will also be doing a talk introducing KNative, which is a powerful way to manage work &lt;a href=&quot;https://devnexus.com/presentations/knative-core-concepts-and-spiders&quot;&gt;and workloads on Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At 1:30pm, Steve Riesenberg and Josh Cummings &lt;a href=&quot;https://devnexus.com/presentations/next-up-spring-security-6&quot;&gt;will introduce Spring Security 6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At 2:45pm, Spring Cloud Function lead Oleg Zhurakousky will &lt;a href=&quot;https://devnexus.com/presentations/spring-cloud-stream-past-present-and-future&quot;&gt;introduce Spring Cloud Stream: Past, Present, and Future&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At 3:45pm, &lt;em&gt;Spring in Action&lt;/em&gt; author Craig Walls will have a talk, &lt;a href=&quot;https://devnexus.com/presentations/kontain-your-spring&quot;&gt;&lt;em&gt;Kontain Your Spring&lt;/em&gt;&lt;/a&gt;. Observability legend Jonatan Ivanov will have a talk &lt;a href=&quot;https://devnexus.com/presentations/to-production-and-beyond-observability-for-modern-spring-applications&quot;&gt;&lt;em&gt;To production and Beyond: Observability for Modern Spring Applications&lt;/em&gt;&lt;/a&gt;. Théo Lebrun will be giving a talk &lt;a href=&quot;https://devnexus.com/presentations/creating-a-modern-web-app-using-spring-boot-and-vue-js-with-jhipster&quot;&gt;_Creating a Modern Web App Using Spring Boot and Vue.js and JHipster&lt;/a&gt;, which looks interesting!&lt;/p&gt;
&lt;p&gt;Whew! What a roundup! There&apos;s a ton of fun to be had these few days! Make sure you stay hyrdated, take good notes, and I look forward to seeing you at 4pm on the 5th!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Cloud 2022.0.2 Is Available]]></title><link>https://spring.io/blog/2023/03/31/spring-cloud-2022-0-2-is-available</link><guid isPermaLink="true">https://spring.io/blog/2023/03/31/spring-cloud-2022-0-2-is-available</guid><dc:creator><![CDATA[Spencer Gibb]]></dc:creator><pubDate>Fri, 31 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the community, I am pleased to announce that the General Availability (RELEASE) of the &lt;a href=&quot;https://cloud.spring.io&quot;&gt;Spring Cloud 2022.0.2&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href=&quot;https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dependencies/2022.0.2/&quot;&gt;Maven Central&lt;/a&gt;. You can check out the 2022.0.2 &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes#202202&quot;&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Notable Changes in the 2022.0.2 Release Train&lt;/h2&gt;
&lt;p&gt;See all issues and pull requests included in this release &lt;a href=&quot;https://github.com/orgs/spring-cloud/projects/104/views/1?layout=board&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Spring Cloud Kubernetes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added support for external name services using the Fabric8 &lt;code&gt;DiscoveryClient&lt;/code&gt; (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-kubernetes/pull/1243&quot;&gt;#1243&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Pod metadata and annotations to &lt;code&gt;ServiceInstance&lt;/code&gt; (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-kubernetes/pull/1254&quot;&gt;#1254&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Allow sendMessage to handle body from file (.&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1867&quot;&gt;1867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Relaxed SSL validation with RestTemplate interceptors (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/pull/1869&quot;&gt;#1869&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Allow emitting healthcheck instances in batches (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-commons/issues/1122&quot;&gt;#1122&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Spring Cloud OpenFeign&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Register native reflection hints for user-provided parameters and return types (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-openfeign/pull/849&quot;&gt;#849&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support setting FeignClient URL in runtime for native images (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-openfeign/issues/807&quot;&gt;#807&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow setting protocols for underlying OKHttp client (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-openfeign/pull/825&quot;&gt;#825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add the possibility to use factory beans for Fallback (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-openfeign/issues/822&quot;&gt;#822&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Spring Cloud Function&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-function/milestone/46?closed=1&quot;&gt;Bug Fixes and enhancements&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Spring Cloud Stream&lt;/h3&gt;
&lt;p&gt;Add support for DLQ in batch mode
&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream/milestone/86?closed=1&quot;&gt;Bug Fixes and enhancements&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Spring Cloud Consul&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an issue where &lt;code&gt;CONSUL_TOKEN&lt;/code&gt; wasn&apos;t read when using &lt;code&gt;spring.config.import=consul:&lt;/code&gt; (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-consul/issues/738&quot;&gt;738&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ACL Token is now passed to &lt;code&gt;agentCheckPass&lt;/code&gt; (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-consul/issues/770&quot;&gt;770&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The global cache can now be disabled when using Local Response Cache (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-gateway/issues/2895&quot;&gt;2895&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The following modules were updated as part of 2022.0.2:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Issues&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Vault&lt;/td&gt;
&lt;td&gt;4.0.1&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-vault/milestone/55?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Circuitbreaker&lt;/td&gt;
&lt;td&gt;3.0.1&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Kubernetes&lt;/td&gt;
&lt;td&gt;3.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-kubernetes/milestone/57?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Task&lt;/td&gt;
&lt;td&gt;3.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-task/milestone/71?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Function&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-function/milestone/46?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Commons&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-commons/milestone/112?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Openfeign&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-openfeign/milestone/61?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Stream&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Consul&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-consul/milestone/67?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Contract&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/milestone/100?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Gateway&lt;/td&gt;
&lt;td&gt;4.0.4&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-gateway/milestone/79?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Config&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-config/milestone/113?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Netflix&lt;/td&gt;
&lt;td&gt;4.0.1&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/milestone/119?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Build&lt;/td&gt;
&lt;td&gt;4.0.2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href=&quot;https://github.com/spring-cloud/&quot;&gt;GitHub&lt;/a&gt;, on &lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud&quot;&gt;Gitter&lt;/a&gt;, on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-cloud&quot;&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href=&quot;https://twitter.com/SpringCloud&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;dependencyManagement&gt;
    &amp;#x3C;dependencies&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.springframework.cloud&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;spring-cloud-dependencies&amp;#x3C;/artifactId&gt;
            &amp;#x3C;version&gt;2022.0.2&amp;#x3C;/version&gt;
            &amp;#x3C;type&gt;pom&amp;#x3C;/type&gt;
            &amp;#x3C;scope&gt;import&amp;#x3C;/scope&gt;
        &amp;#x3C;/dependency&gt;
    &amp;#x3C;/dependencies&gt;
&amp;#x3C;/dependencyManagement&gt;
&amp;#x3C;dependencies&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.cloud&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-cloud-starter-config&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.cloud&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-cloud-starter-netflix-eureka-client&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;
    ...
&amp;#x3C;/dependencies&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;plugins {
  id &apos;java&apos;
  id &apos;org.springframework.boot&apos; version &apos;3.0.5&apos;
  id &apos;io.spring.dependency-management&apos; version &apos;1.1.0&apos;
}

ext {
  set(&apos;springCloudVersion&apos;, &quot;2022.0.2&quot;)
}

dependencies {
  implementation &apos;org.springframework.cloud:spring-cloud-starter-config&apos;
  implementation &apos;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&apos;
  // ...
  testImplementation &apos;org.springframework.boot:spring-boot-starter-test&apos;
}

dependencyManagement {
  imports {
    mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}&quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast:  Spring Integration lead Artem Bilan on the latest in Spring Integration 6]]></title><link>https://spring.io/blog/2023/03/30/a-bootiful-podcast-spring-integration-lead-artem-bilan-on-the-latest-in</link><guid isPermaLink="true">https://spring.io/blog/2023/03/30/a-bootiful-podcast-spring-integration-lead-artem-bilan-on-the-latest-in</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 30 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;iframe title=&quot;Spring Integration lead Artem Bilan&quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=z82h7-13ce172-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! In this installment Josh Long (&lt;a href=&quot;https://twitter.com/starbuxman&quot;&gt;@starbuxman&lt;/a&gt;) talks to Spring Integration lead Artem Bilan (&lt;a href=&quot;https://twitter.com/artem_bilan&quot;&gt;@artem_bilan&lt;/a&gt;) about the latest and greatest in Spring Integration. Spring Integration makes it easier to connect an increasingly larger ecosystem of disparate services and systems.&lt;/p&gt;
&lt;p&gt;SHOW NOTES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wrote an e-book on &lt;a href=&quot;https://bit.ly/springboot3-graalvm-ebook&quot;&gt;AOT and GraalVM support in Spring Boot 3 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;did u see that &lt;a href=&quot;https://www.youtube.com/watch?v=nyR-qzj7O3w&amp;#x26;list=PLgGXSWYM2FpPw8rV0tZoMiJYSCiLhPnOc&amp;#x26;index=1&quot;&gt;Spring Tips video I did last week on Vaadin?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out this roving 1 hour tour of &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;Spring Boot 3 over on the Jetbrains IntelliJ IDEA channel &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did a &lt;a href=&quot;https://www.youtube.com/watch?v=WJutdzX9hl0&quot;&gt;6m video looking at Spring Boot 3&lt;/a&gt; for the impatient on my channel&lt;/li&gt;
&lt;li&gt;See you soon at &lt;a href=&quot;https://devnexus.org/&quot;&gt;Devnexus&lt;/a&gt;, &lt;a href=&quot;https://kotlinconf.com/speakers/f2617bc2-d35e-4fd7-9cea-02060f3e1608/&quot;&gt;Kotlin Conf&lt;/a&gt;, and &lt;a href=&quot;https://www.devoxx.fr/&quot;&gt;Devoxx France&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Web Flow 3.0 RC1 Released]]></title><link>https://spring.io/blog/2023/03/30/spring-web-flow-3-0-rc1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/03/30/spring-web-flow-3-0-rc1-released</guid><dc:creator><![CDATA[Rossen Stoyanchev]]></dc:creator><pubDate>Thu, 30 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m pleased to announce that Spring Web Flow 3.0 RC1 is now available from the &lt;a href=&quot;https://repo.spring.io/ui/native/milestone&quot;&gt;Spring milestone&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;As mentioned in the &lt;a href=&quot;https://spring.io/blog/2022/08/10/spring-web-flow-3-0-m1-released&quot;&gt;3.0 M1 announcement&lt;/a&gt;, milestone 1 did not include JSF support. This release changes that and upgrades the Spring Faces module to a Spring Framework 6, Jakarta EE, and Java 17 baseline. The &lt;a href=&quot;https://github.com/spring-projects/spring-webflow-samples&quot;&gt;spring-webflow-samples&lt;/a&gt;, including JSF samples, have been upgraded to the latest, and you can use sample changes as pointers for your own upgrades.&lt;/p&gt;
&lt;p&gt;Spring Web Flow has also migrated from JIRA to GitHub issues recently, and that means you can now search, create, and watch both issues and pull requests, from the project&apos;s &lt;a href=&quot;https://github.com/spring-projects/spring-webflow/issues&quot;&gt;GitHub issues&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;If you have a Spring Web Flow application, with or without JSF, please give this release a try. Your feedback is much appreciated.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Context Propagation with Project Reactor 3 - Unified Bridging between Reactive and Imperative]]></title><link>https://spring.io/blog/2023/03/30/context-propagation-with-project-reactor-3-unified-bridging-between-reactive</link><guid isPermaLink="true">https://spring.io/blog/2023/03/30/context-propagation-with-project-reactor-3-unified-bridging-between-reactive</guid><dc:creator><![CDATA[Dariusz Jędrzejczyk]]></dc:creator><pubDate>Wed, 29 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This post is a part of a series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/28/context-propagation-with-project-reactor-1-the-basics&quot;&gt;The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/29/context-propagation-with-project-reactor-2-the-bumpy-road-of-spring-cloud&quot;&gt;The bumpy road of Spring Cloud Sleuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/03/30/context-propagation-with-project-reactor-3-unified-bridging-between-reactive&quot;&gt;Unified Bridging between Reactive and Imperative&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We concluded &lt;a href=&quot;https://spring.io/blog/2023/03/29/context-propagation-with-project-reactor-2-the-bumpy-road-of-spring-cloud&quot;&gt;the last article&lt;/a&gt; with the thought that Spring Cloud Sleuth’s &lt;code&gt;MANUAL&lt;/code&gt; context propagation strategy is both performant and provides correct semantics. Out of many experiences, the Spring, Micrometer, and Reactor teams created a new context-propagation library. Its goal is to encapsulate the concern of transporting contextual data between &lt;code&gt;ThreadLocal&lt;/code&gt; values and &lt;code&gt;Map&lt;/code&gt;-like structures. Both Micrometer 1.10 and Reactor 3.5 build on top of it to provide a first-class experience between Reactor and imperative code. By using Reactor &lt;code&gt;Context&lt;/code&gt;, we implicitly expose &lt;code&gt;ThreadLocal&lt;/code&gt; values that are used by Micrometer to instrument tracing libraries as well as to populate SLF4J’s &lt;code&gt;MDC&lt;/code&gt; to provide logs that include the tracing identifiers.&lt;/p&gt;
&lt;p&gt;In this article, we will take a different approach than before. Instead of building our knowledge from the ground up, we’ll start with the ready top-level API available to you and afterwards explain what is happening behind the scenes. At the end, you will be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand why these mechanisms work the way they do.&lt;/li&gt;
&lt;li&gt;Make the right decisions as to which approach to take in your application or library.&lt;/li&gt;
&lt;li&gt;Know when and why you needn’t do anything and expect everything to work out-of-the-box.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reactive Context and ThreadLocals&lt;/h2&gt;
&lt;p&gt;Let’s revisit the example from the first article, where we showed how a &lt;code&gt;delayElement&lt;/code&gt; operator caused a reactive chain to lose the correlation identifier. Let’s recall the code, starting with our actions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; addProduct(String productName) {
  log(&quot;Adding product: &quot; + productName);
  return Mono.empty(); // Assume we’re actually storing the product
}

Mono&amp;#x3C;Boolean&gt; notifyShop(String productName) {
  log(&quot;Notifying shop about: &quot; + productName);
  return Mono.just(true); // Assume we’re actually notifying the shop
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we need to recall the binding request handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  initRequest(); &amp;#x3C;1&gt;
  log(&quot;Assembling the chain&quot;); // &amp;#x3C;2&gt;

  return Mono.just(&quot;test-product&quot;)
    .delayElement(Duration.ofMillis(1)) // &amp;#x3C;3&gt;
    .flatMap(product -&gt;
      Flux.concat(
        addProduct(product), // &amp;#x3C;4&gt;
        notifyShop(product)).then())
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Starting from Reactor 3.5.0, Reactor &lt;code&gt;Context&lt;/code&gt; is able to integrate with a new library, under the Micrometer umbrella, called &lt;a href=&quot;https://github.com/micrometer-metrics/context-propagation&quot;&gt;&lt;code&gt;context-propagation&lt;/code&gt;&lt;/a&gt;. We’ll describe that integration in a bit more detail by the end of this article.
In Reactor 3.5+, when the &lt;code&gt;context-propagation&lt;/code&gt; library is on the classpath, we can expect our &lt;code&gt;ThreadLocal&lt;/code&gt; values to be present when we log in the &lt;code&gt;handle&lt;/code&gt; operator as well as the new &lt;code&gt;tap&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;To propagate our custom &lt;code&gt;ThreadLocal&lt;/code&gt;, we need to register a &lt;code&gt;ThreadLocalContextAccessor&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ContextRegistry.getInstance()
  .registerThreadLocalAccessor(&quot;CORRELATION_ID&quot;,
    CORRELATION_ID::get,
    CORRELATION_ID::set,
    CORRELATION_ID::remove);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now, the details of the &lt;code&gt;context-propagation&lt;/code&gt; library are not essential to achieve what we need. The only thing we need to know is that we used the key, &lt;code&gt;CORRELATION_ID&lt;/code&gt;, which will be used with the Reactor &lt;code&gt;Context&lt;/code&gt; to restore the &lt;code&gt;ThreadLocal&lt;/code&gt; in our special operators. Let’s modify the rest of the code to use them and log in the dedicated places.&lt;/p&gt;
&lt;p&gt;We need just one alteration to our request handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  initRequest(); // &amp;#x3C;1&gt;
  log(&quot;Assembling the chain&quot;);

  return Mono.just(&quot;test-product&quot;)
    .delayElement(Duration.ofMillis(1))
    .flatMap(product -&gt;
      Flux.concat(
        addProduct(product),
        notifyShop(product)).then())
    .contextCapture(); // &amp;#x3C;2&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only modification we’re doing is the &lt;code&gt;&amp;#x3C;2&gt;&lt;/code&gt; &lt;code&gt;contextCapture&lt;/code&gt; operator at the very end of the chain we return to the caller. The job of this operator is to capture current &lt;code&gt;ThreadLocal&lt;/code&gt; values, for which &lt;code&gt;ThreadLocalAccessor&lt;/code&gt; instances are registered in &lt;code&gt;ContextRegistry&lt;/code&gt;, and store them under the same keys in the Reactor &lt;code&gt;Context&lt;/code&gt;. In this particular implementation, our only hope is that the subscription happens immediately after the assembly phase, as in &lt;code&gt;&amp;#x3C;1&gt;&lt;/code&gt;, where we set the &lt;code&gt;ThreadLocal&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Next, we’ll use the &lt;code&gt;tap&lt;/code&gt; operator to add logging:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; addProduct(String productName) {
  return Mono.&amp;#x3C;Void&gt;empty()
    .tap(() -&gt; new DefaultSignalListener&amp;#x3C;&gt;() {
      @Override
      public void doOnComplete() throws Throwable {
        log(&quot;Adding product: &quot; + productName);
      }
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are extending the &lt;code&gt;DefaultSignalListener&lt;/code&gt; from &lt;code&gt;reactor-core&lt;/code&gt;’s &lt;code&gt;reactor.core.observability&lt;/code&gt; package. We are only interested in tapping to the completion signal, where we perform the log operation.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;handle&lt;/code&gt; operator, we’ll alter the &lt;code&gt;notifyShop&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Boolean&gt; notifyShop(String productName) {
  return Mono.just(true)
    .handle((result, sink) -&gt; {
      log(&quot;Notifying shop about: &quot; + productName);
      sink.next(result);
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see if now, when we call our handler, we’ll get the proper output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;handleRequest().block();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][  643805344761543048] Assembling the chain
[parallel-1][  643805344761543048] Adding product: test-product
[parallel-1][  643805344761543048] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! This is, in fact, the same approach as Spring Cloud Sleuth’s &lt;code&gt;MANUAL&lt;/code&gt; strategy but is integrated into Reactor’s internals, so you need not restore &lt;code&gt;ThreadLocal&lt;/code&gt; values by hand. We chose &lt;code&gt;tap&lt;/code&gt; and &lt;code&gt;handle&lt;/code&gt; because those operators have access to the &lt;code&gt;Subscriber&lt;/code&gt;-bound &lt;code&gt;Context&lt;/code&gt; and allow taking action upon a concrete Reactive Streams signal.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Remember&lt;/em&gt;: Reactor &lt;code&gt;Context&lt;/code&gt; for writing, &lt;code&gt;ThreadLocals&lt;/code&gt; for reading.&lt;/p&gt;
&lt;p&gt;As a matter of fact, our request handler is a bit dangerous. If we delay the act of subscribing, we will lose the correlation identifier. Consider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; requestHandler = handleRequest(); // &amp;#x3C;1&gt;

Thread subscriberThread = new Thread(requestHandler::block); // &amp;#x3C;2&gt;
subscriberThread.start();
subscriberThread.join();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][ 1388809065574796038] Assembling the chain
[parallel-1][                null] Adding product: test-product
[parallel-1][                null] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The assembly happened in &lt;code&gt;&amp;#x3C;1&gt;&lt;/code&gt; and the &lt;code&gt;ThreadLocal&lt;/code&gt; was set in &lt;code&gt;main&lt;/code&gt;. However, the subscription happens on a new &lt;code&gt;Thread&lt;/code&gt; in &lt;code&gt;&amp;#x3C;2&gt;&lt;/code&gt;, which doesn’t have the &lt;code&gt;ThreadLocal&lt;/code&gt; values to capture. Therefore, our logs have no correlation identifiers. We could wrap the body of our handler with &lt;code&gt;Mono.defer()&lt;/code&gt; to solve this issue. However, instead of that, let’s consider whether we need a &lt;code&gt;ThreadLocal&lt;/code&gt; to be actually set in the first place.&lt;/p&gt;
&lt;p&gt;In an imperative application that invokes a Reactor chain, such as a Spring MVC controller method that calls &lt;code&gt;WebClient&lt;/code&gt;, &lt;code&gt;ThreadLocal&lt;/code&gt; values are already established and &lt;code&gt;contextCapture&lt;/code&gt; will pick them up and store them in the &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In a reactive stack, like WebFlux, on the other hand, it makes more sense to use &lt;code&gt;contextWrite&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;We know that Reactor will use the contents of its &lt;code&gt;Context&lt;/code&gt; to restore &lt;code&gt;ThreadLocal&lt;/code&gt; values. If we directly store the intended values in the &lt;code&gt;Context&lt;/code&gt;, instead of capturing them from the current state, we’ll improve the performance by a tiny bit, but we’ll also improve the compliance with the functional programming paradigm. Let’s try that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  // initRequest(); -- no write to ThreadLocal
  log(&quot;Assembling the chain&quot;);

  return Mono.just(&quot;test-product&quot;)
    // &amp;#x3C;1&gt;
    .delayElement(Duration.ofMillis(1))
    .flatMap(product -&gt;
      Flux.concat(
        addProduct(product),
        notifyShop(product)).then())
    .contextWrite(
      Context.of(&quot;CORRELATION_ID&quot;, correlationId())); // &amp;#x3C;2&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s run it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][                null] Assembling the chain
[parallel-1][ 7059587638538899074] Adding product: test-product
[parallel-1][ 7059587638538899074] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice! Our actual reactive chain contains a proper correlation identifier.&lt;/p&gt;
&lt;p&gt;Unfortunately, we lost one in the assembly phase. One reason for it is that the log doesn’t happen within a &lt;code&gt;handle&lt;/code&gt; or &lt;code&gt;tap&lt;/code&gt; operator. If we added an initial log in &lt;code&gt;&amp;#x3C;1&gt;&lt;/code&gt; using the &lt;code&gt;tap&lt;/code&gt; operator, we’d be fine. The &lt;code&gt;Context&lt;/code&gt; with the correlation identifier is bound to the chain upstream from &lt;code&gt;&amp;#x3C;2&gt;&lt;/code&gt;. If we added a logging &lt;code&gt;tap&lt;/code&gt; operator after the &lt;code&gt;contextWrite&lt;/code&gt; call, we’d not see the correct correlation identifier – the attached &lt;code&gt;Context&lt;/code&gt; at that stage is a different one and doesn’t have our identifier. We’ll get back to this issue in a moment, but first, let’s consider if we can simplify our code and avoid the special operators.&lt;/p&gt;
&lt;h2&gt;Automatic Context Propagation&lt;/h2&gt;
&lt;p&gt;When &lt;code&gt;reactor-core&lt;/code&gt; 3.5.0 was released, it was included in Spring Framework 6.0 and Spring Boot 3.0. Existing Spring users who used Spring Cloud Sleuth for tracing were used to having logs populated with &lt;code&gt;trace-id&lt;/code&gt; and &lt;code&gt;span-id&lt;/code&gt; values (similarly to our correlation identifier). A switch to the new paradigm, where observability is part of the core suite of Spring products, would require existing applications to rewrite their logging to use the &lt;code&gt;handle&lt;/code&gt; and &lt;code&gt;tap&lt;/code&gt; operators. We continued thinking how we can make more operators capable of restoring the &lt;code&gt;ThreadLocal&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;As we’ve seen in the previous article, restoring &lt;code&gt;ThreadLocal&lt;/code&gt; values that can span multiple operators is not an easy task. &lt;code&gt;handle&lt;/code&gt; and &lt;code&gt;tap&lt;/code&gt; were chosen, because they do not let &lt;code&gt;ThreadLocal&lt;/code&gt; values leak. No signals are propagated as a result of running the user’s code. The &lt;code&gt;ThreadLocal&lt;/code&gt; values are present when the user code runs. Then the result is captured. Finally, the &lt;code&gt;ThreadLocal&lt;/code&gt; context is cleared. Only afterwards does the reactive propagation of signals happen to downstream operators. Also, we wanted to be more selective, as performing the restoration in every operator has a lot of overhead, as discussed &lt;a href=&quot;https://spring.io/blog/2023/03/29/context-propagation-with-project-reactor-2-the-bumpy-road-of-spring-cloud&quot;&gt;in part 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We rethought everything carefully and came up with an idea can be combined to the following call (starting from &lt;code&gt;reactor-core&lt;/code&gt; 3.5.3):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Hooks.enableAutomaticContextPropagation();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can add it to the &lt;code&gt;main&lt;/code&gt; method of our application.&lt;/p&gt;
&lt;p&gt;We can now restore our initial implementation of the action methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; addProduct(String productName) {
  log(&quot;Adding product: &quot; + productName);
  return Mono.empty();
}

Mono&amp;#x3C;Boolean&gt; notifyShop(String productName) {
  log(&quot;Notifying shop about: &quot; + productName);
  return Mono.just(true);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We leave the &lt;code&gt;handleRequest&lt;/code&gt; method and subscription on a new &lt;code&gt;Thread&lt;/code&gt; unchanged. Let’s run it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][                null] Assembling the chain
[parallel-1][ 8362586195225273235] Adding product: test-product
[parallel-1][ 8362586195225273235] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;With this feature, we can migrate an existing codebase that uses Spring Cloud Sleuth to the new Spring Framework without doing any changes to the way we log. With the above hook, if you use Spring Boot Actuator with Micrometer Tracing, the SLF4J logs have tracing information populated without the need to do anything. Soon, Spring Boot will automatically call the hook for you.&lt;/p&gt;
&lt;h2&gt;Writing Framework Code&lt;/h2&gt;
&lt;p&gt;We mentioned that we’d get back to the problem with the log at assembly time. So far, we’ve been initiating the correlation identifier generation process in our request handling logic. Ideally, our handler should be called by the server and the resulting &lt;code&gt;Publisher&lt;/code&gt; (&lt;code&gt;Flux&lt;/code&gt; or &lt;code&gt;Mono&lt;/code&gt;) subscribed to from the calling code. Our handler is back to the initial shape:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  log(&quot;Assembling the chain&quot;);

  return Mono.just(&quot;test-product&quot;)
    .delayElement(Duration.ofMillis(1))
    .flatMap(product -&gt;
      Flux.concat(
        addProduct(product),
        notifyShop(product)).then());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s imitate the server code by attaching the context to the returned &lt;code&gt;Mono&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; requestHandler = handleRequest()
  .contextWrite(Context.of(&quot;CORRELATION_ID&quot;, correlationId()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we need to run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;requestHandler.block();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The assembly time is still missing the correlation identifier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][                null] Assembling the chain
[parallel-1][ 5508113792645841519] Adding product: test-product
[parallel-1][ 5508113792645841519] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;contextWrite&lt;/code&gt; operator restores &lt;code&gt;ThreadLocal&lt;/code&gt; values during subscription time (as well as for other lifecycle events). To have the user code have logs during the assembly time, the entire call to that code needs to be part of a reactive chain. In that way, the user’s code is executed during subscription of the outer &lt;code&gt;Mono&lt;/code&gt; and the returned inner &lt;code&gt;Mono&lt;/code&gt; is subscribed to immediately. For the entire execution, the outer &lt;code&gt;Mono&lt;/code&gt;’s &lt;code&gt;Context&lt;/code&gt; is made available in &lt;code&gt;ThreadLocal&lt;/code&gt;s if we do this in our “framework” code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; requestHandler = Mono.defer(() -&gt; handleRequest())
  .contextWrite(Context.of(&quot;CORRELATION_ID&quot;, correlationId()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All that we needed to do was use &lt;code&gt;Mono.defer()&lt;/code&gt; and attach the &lt;code&gt;Context&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;Luckily, Spring Framework does its job well and handles our assembly during the subscription phase as well.&lt;/p&gt;
&lt;h2&gt;Are We Done Solving the Context-propagation Problem?&lt;/h2&gt;
&lt;p&gt;This new approach looks very encouraging. One might wonder, with the approaches taken in the past, how will this new mechanism break? We feel more confident about this approach because it is more aligned with the nature of Reactive Streams. The approaches that were not based around Reactor &lt;code&gt;Context&lt;/code&gt; had one major misconception embedded in them – they propagate &lt;code&gt;ThreadLocal&lt;/code&gt; values downstream – hopefully, trying to clean up at some point. However, there were no semantic boundaries for the propagation to stop.&lt;/p&gt;
&lt;p&gt;Relying on downstream propagation of &lt;code&gt;ThreadLocal&lt;/code&gt; values can be a source of errors, too. Reactive libraries propagate signals upstream and downstream. One signal potentially triggers another signal, but it doesn’t have to. A different &lt;code&gt;Thread&lt;/code&gt; can continue processing. Certain optimizations (such as prefetching) that are done by &lt;code&gt;flatMap&lt;/code&gt;-like operators, can request and enqueue values from the upstream, without our downstream propagating mechanism being involved.
If we want to be able to have contextual information even when we log at the time of backpressure or cancellation, we need to take all the possible signals into account.&lt;/p&gt;
&lt;p&gt;One important observation comes from the way the &lt;code&gt;Context&lt;/code&gt; dictates logical boundaries. When you call &lt;code&gt;contextWrite&lt;/code&gt; and store a value in the &lt;code&gt;Context&lt;/code&gt;, all the upstream operators have access to the modified version. All the downstream operators won’t see the modification but will see the state upon which your modification is based.&lt;/p&gt;
&lt;p&gt;The nature of a &lt;code&gt;Subscriber&lt;/code&gt;-bound &lt;code&gt;Context&lt;/code&gt; serves as the basis for our new approach. We modified the &lt;code&gt;contextWrite&lt;/code&gt; operator to set &lt;code&gt;ThreadLocal&lt;/code&gt; values to reflect the current &lt;code&gt;Context&lt;/code&gt; when signals travel upstream at subscription time, as well as at cancellation and request. But it resets those &lt;code&gt;ThreadLocal&lt;/code&gt; values to the ones represented in the downstream &lt;code&gt;Context&lt;/code&gt; whenever a signal is propagated downstream.&lt;/p&gt;
&lt;p&gt;We still need to use the &lt;code&gt;Scheduler&lt;/code&gt; wrapping approach. We also need the &lt;code&gt;Queue&lt;/code&gt; wrapping approach (&lt;a href=&quot;https://github.com/reactor/reactor-core/issues/3369&quot;&gt;for which we need to improve the lifecycle semantics&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But we might consider improving the situation by &lt;a href=&quot;https://github.com/reactor/reactor-core/pull/2983&quot;&gt;transporting the Reactor &lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; in those cases instead of capturing the &lt;code&gt;ThreadLocal&lt;/code&gt; values. That could improve the performance.&lt;/p&gt;
&lt;p&gt;Also, when we work with &lt;code&gt;Publisher&lt;/code&gt;s that are outside of Reactor’s control or sources that use &lt;code&gt;Thread&lt;/code&gt;s that we don’t control (like with the &lt;code&gt;Mono.fromFuture()&lt;/code&gt; example to mimic a remote call) we still lose the &lt;code&gt;ThreadLocal&lt;/code&gt; values. A mitigation for now is to introduce the semantic boundary of &lt;code&gt;contextWrite&lt;/code&gt; operator, which doesn’t really change the &lt;code&gt;Context&lt;/code&gt;, as in this variation of the &lt;code&gt;notifyShop&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Boolean&gt; notifyShop(String productName) {
  log(&quot;Notifying shop about: &quot; + productName);
  return makeRequest(productName) // &amp;#x3C;1&gt;
    .contextWrite(Function.identity()) // &amp;#x3C;2&gt;
    .doOnNext(r -&gt; log(&quot;Request done.&quot;)); // &amp;#x3C;3&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;makeRequest&lt;/code&gt; method was defined &lt;a href=&quot;https://spring.io/blog/2023/03/29/context-propagation-with-project-reactor-2-the-bumpy-road-of-spring-cloud&quot;&gt;in the previous article&lt;/a&gt; in the series. If we assume &lt;code&gt;makeRequest&lt;/code&gt; is a 3rd-party library call, which uses &lt;code&gt;Thread&lt;/code&gt;s we can’t control, we also can’t wrap the code it executes in &lt;code&gt;&amp;#x3C;1&gt;&lt;/code&gt; and within the asynchronous code that completes its operation. Any logs done by that part of the chain won’t be populated with the correlation identifier. It would be the library author’s responsibility to propagate such context. However, because we used the boundary in &lt;code&gt;&amp;#x3C;2&gt;&lt;/code&gt;, our log in &lt;code&gt;&amp;#x3C;3&gt;&lt;/code&gt; contains the correlation identifier.&lt;/p&gt;
&lt;p&gt;We &lt;a href=&quot;https://github.com/reactor/reactor-core/issues/3366&quot;&gt;intend to add the necessary functionality&lt;/a&gt; in &lt;code&gt;reactor-core&lt;/code&gt; to provide such a boundary for sources that can change &lt;code&gt;Threads&lt;/code&gt; in a way that is outside of Reactor’s control.&lt;/p&gt;
&lt;p&gt;In imperative scenarios, that call reactive code only to use a blocking subscription (by using &lt;code&gt;block()&lt;/code&gt; for example), &lt;a href=&quot;https://github.com/reactor/reactor-core/issues/3406&quot;&gt;we plan to automatically perform &lt;code&gt;contextCapture&lt;/code&gt;&lt;/a&gt; to transparently propagate current &lt;code&gt;ThreadLocal&lt;/code&gt; values into the reactive chain. This will be useful when interacting with WebClient in a Spring MVC application for instance.&lt;/p&gt;
&lt;h2&gt;Context-propagation Library&lt;/h2&gt;
&lt;p&gt;The task of capturing &lt;code&gt;ThreadLocal&lt;/code&gt; state and restoring it in various places is an interesting subject on its own. Usually, we think of multiple &lt;code&gt;ThreadLocal&lt;/code&gt; values that have a logical connection to each other or a &lt;code&gt;Map&lt;/code&gt;-like structure corresponding to various concerns. We have created a dedicated library that allows transforming between &lt;code&gt;ThreadLocal&lt;/code&gt;s and arbitrary objects by capturing their state and restoring it into the respective target. In the preceding examples, we used some of the API of the &lt;a href=&quot;https://github.com/micrometer-metrics/context-propagation&quot;&gt;&lt;code&gt;context-propagation&lt;/code&gt;&lt;/a&gt; library. It is open sourced under the Micrometer umbrella, and, if you’d like to use it in your code, it has &lt;a href=&quot;https://micrometer.io/docs/contextPropagation&quot;&gt;reference documentation&lt;/a&gt; with examples, too.&lt;/p&gt;
&lt;p&gt;Project Reactor registers a &lt;code&gt;ContextAccessor&lt;/code&gt; that deals with the Reactor &lt;code&gt;Context&lt;/code&gt;, using the &lt;code&gt;ServiceLoader&lt;/code&gt; JDK mechanism. On the other end, Micrometer registers an &lt;code&gt;ObservationThreadLocalAccessor&lt;/code&gt;, that deals with the &lt;code&gt;ThreadLocal&lt;/code&gt; state necessary for Micrometer Tracing and other instrumentation mechanisms to work using the single &lt;code&gt;Observation&lt;/code&gt; concept.&lt;/p&gt;
&lt;p&gt;We highly recommend trying out Spring Boot with Spring Boot Actuator to enable the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.micrometer-tracing&quot;&gt;tracing capabilities&lt;/a&gt; and see for yourself how cohesive the experience is.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this series of blog posts, we covered the basics of Context Propagation and we covered the history and status quo of bridging between the imperative and reactive programming paradigms. We do hope you can now confidently use the features we implemented. In the best case scenario, there isn’t much work for you to do if you go with the automatic context propagation feature. Also, in this interesting scenario, we hope your custom propagation logic can take advantage of the primitives we’ve described in this article. You can &lt;a href=&quot;https://projectreactor.io&quot;&gt;reach out to us&lt;/a&gt; if you have questions or &lt;a href=&quot;https://github.com/reactor/reactor-core/issues&quot;&gt;report issues on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;This series would not have been published without the help of my colleagues reviewing every bit. I’d like to thank (in alphabetical order): Simon Baslé, Jay Bryant, Pierre De Rop, Oleh Dokuka, Marcin Grzejszczak, Robert McNees, Rossen Stoyanchev, and Tadaya Tsuyukubo.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;To play with the examples used, feel free to use &lt;a href=&quot;https://github.com/chemicL/reactor-lab/tree/main/src/main/java/dev/jedrzejczyk/reactorlab/contextpropagation&quot;&gt;the relevant package in my GitHub repository&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>